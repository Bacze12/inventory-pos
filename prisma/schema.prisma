generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  email          String   @unique
  name           String
  password       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  isActive       Boolean  @default(true)
  role           UserRole @default(CASHIER)
  ecommerceUserId String?
  sales          Sale[]
  shifts         Shift[]
}

model Product {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  createdAt            DateTime @default(now())
  categoryId           String?  @db.ObjectId
  deletedAt            DateTime?
  extraTaxRate         Float?
  finalPrice           Float?
  hasExtraTax          Boolean  @default(false)
  isActive             Boolean  @default(true)
  isIvaExempt          Boolean  @default(false)
  marginPercent        Float?
  minSellingPrice      Float?
  purchasePrice        Float?
  sellingPrice         Float?
  sku                  String?
  stock                Int      @default(0)
  supplierId           String?  @db.ObjectId
  updatedAt            DateTime @default(now())
  inventory            Inventory[]
  priceHistory         PriceHistory[]
  category             Category? @relation(fields: [categoryId], references: [id])
  supplier             Supplier? @relation(fields: [supplierId], references: [id])
  productProfitability ProductProfitability[]
  saleItems            SaleItem[]
}

model Tenant {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  ecommerceUserId String   @unique
  schemaName     String   @unique
  createdAt      DateTime @default(now())
}

model Sale {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  total         Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  extraTaxTotal Float?
  ivaAmount     Float?
  paymentMethod PaymentMethod @default(CASH)
  subtotal      Float?
  userId        String?  @db.ObjectId
  user          User?    @relation(fields: [userId], references: [id])
  items         SaleItem[]
  shiftId       String?  @db.ObjectId
  shift         Shift?   @relation(fields: [shiftId], references: [id])
}

model SaleItem {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity       Int
  price          Float
  saleId         String   @db.ObjectId
  productId      String   @db.ObjectId
  basePrice      Float?
  extraTaxAmount Float?
  ivaAmount      Float?
  totalPrice     Float?
  product        Product  @relation(fields: [productId], references: [id])
  sale           Sale     @relation(fields: [saleId], references: [id])
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  products    Product[]
}

model Inventory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int
  type      InventoryMovementType @default(IN)
  date      DateTime @default(now())
  notes     String?
  product   Product   @relation(fields: [productId], references: [id])
}

model PriceHistory {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  productId     String   @db.ObjectId
  date          DateTime @default(now())
  purchasePrice Float
  sellingPrice  Float
  reason        String?
  product       Product   @relation(fields: [productId], references: [id])
}

model ProductProfitability {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   @db.ObjectId
  date       DateTime @default(now())
  costPrice  Float
  sellPrice  Float
  margin     Float
  marginRate Float
  product    Product   @relation(fields: [productId], references: [id])
}

model Supplier {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  phone     String
  address   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime
  products  Product[]
}

model Shift {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  startTime   DateTime @default(now())
  endTime     DateTime?
  userId      String   @db.ObjectId
  status      ShiftStatus @default(OPEN)
  initialCash Float
  finalCash   Float?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  cashDrawer  CashDrawer[]
  sales       Sale[]
}

model CashDrawer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  shiftId     String   @db.ObjectId
  type        MovementType
  amount      Float
  reason      String?
  createdAt   DateTime @default(now())
  shift       Shift     @relation(fields: [shiftId], references: [id])
}

enum ShiftStatus {
  OPEN
  CLOSED
  CANCELLED
}

enum MovementType {
  CASH_IN
  CASH_OUT
  INITIAL_CASH
  FINAL_CASH
}

enum InventoryMovementType {
  IN
  OUT
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
}

enum UserRole {
  ADMIN
  CASHIER
  MANAGER
}
